# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body66(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'registered_on': 'date',
        'cancelled_on': 'date',
        'billed_on': 'date',
        'billed_until': 'date',
        'description': 'str'
    }

    attribute_map = {
        'registered_on': 'registered_on',
        'cancelled_on': 'cancelled_on',
        'billed_on': 'billed_on',
        'billed_until': 'billed_until',
        'description': 'description'
    }

    def __init__(self, registered_on=None, cancelled_on=None, billed_on=None, billed_until=None, description=None):  # noqa: E501
        """Body66 - a model defined in Swagger"""  # noqa: E501
        self._registered_on = None
        self._cancelled_on = None
        self._billed_on = None
        self._billed_until = None
        self._description = None
        self.discriminator = None
        if registered_on is not None:
            self.registered_on = registered_on
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if billed_on is not None:
            self.billed_on = billed_on
        if billed_until is not None:
            self.billed_until = billed_until
        if description is not None:
            self.description = description

    @property
    def registered_on(self):
        """Gets the registered_on of this Body66.  # noqa: E501


        :return: The registered_on of this Body66.  # noqa: E501
        :rtype: date
        """
        return self._registered_on

    @registered_on.setter
    def registered_on(self, registered_on):
        """Sets the registered_on of this Body66.


        :param registered_on: The registered_on of this Body66.  # noqa: E501
        :type: date
        """

        self._registered_on = registered_on

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this Body66.  # noqa: E501


        :return: The cancelled_on of this Body66.  # noqa: E501
        :rtype: date
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this Body66.


        :param cancelled_on: The cancelled_on of this Body66.  # noqa: E501
        :type: date
        """

        self._cancelled_on = cancelled_on

    @property
    def billed_on(self):
        """Gets the billed_on of this Body66.  # noqa: E501


        :return: The billed_on of this Body66.  # noqa: E501
        :rtype: date
        """
        return self._billed_on

    @billed_on.setter
    def billed_on(self, billed_on):
        """Sets the billed_on of this Body66.


        :param billed_on: The billed_on of this Body66.  # noqa: E501
        :type: date
        """

        self._billed_on = billed_on

    @property
    def billed_until(self):
        """Gets the billed_until of this Body66.  # noqa: E501


        :return: The billed_until of this Body66.  # noqa: E501
        :rtype: date
        """
        return self._billed_until

    @billed_until.setter
    def billed_until(self, billed_until):
        """Sets the billed_until of this Body66.


        :param billed_until: The billed_until of this Body66.  # noqa: E501
        :type: date
        """

        self._billed_until = billed_until

    @property
    def description(self):
        """Gets the description of this Body66.  # noqa: E501


        :return: The description of this Body66.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body66.


        :param description: The description of this Body66.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body66, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body66):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
