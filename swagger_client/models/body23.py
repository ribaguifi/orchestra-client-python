# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body23(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_name': 'str',
        'full_name': 'str',
        'email': 'str',
        'email_usage': 'list[str]',
        'phone': 'str',
        'phone2': 'str',
        'address': 'str',
        'city': 'str',
        'zipcode': 'str',
        'country': 'str'
    }

    attribute_map = {
        'short_name': 'short_name',
        'full_name': 'full_name',
        'email': 'email',
        'email_usage': 'email_usage',
        'phone': 'phone',
        'phone2': 'phone2',
        'address': 'address',
        'city': 'city',
        'zipcode': 'zipcode',
        'country': 'country'
    }

    def __init__(self, short_name=None, full_name=None, email=None, email_usage=None, phone=None, phone2=None, address=None, city=None, zipcode=None, country=None):  # noqa: E501
        """Body23 - a model defined in Swagger"""  # noqa: E501
        self._short_name = None
        self._full_name = None
        self._email = None
        self._email_usage = None
        self._phone = None
        self._phone2 = None
        self._address = None
        self._city = None
        self._zipcode = None
        self._country = None
        self.discriminator = None
        self.short_name = short_name
        if full_name is not None:
            self.full_name = full_name
        self.email = email
        self.email_usage = email_usage
        if phone is not None:
            self.phone = phone
        if phone2 is not None:
            self.phone2 = phone2
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if zipcode is not None:
            self.zipcode = zipcode
        if country is not None:
            self.country = country

    @property
    def short_name(self):
        """Gets the short_name of this Body23.  # noqa: E501


        :return: The short_name of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Body23.


        :param short_name: The short_name of this Body23.  # noqa: E501
        :type: str
        """
        if short_name is None:
            raise ValueError("Invalid value for `short_name`, must not be `None`")  # noqa: E501

        self._short_name = short_name

    @property
    def full_name(self):
        """Gets the full_name of this Body23.  # noqa: E501


        :return: The full_name of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Body23.


        :param full_name: The full_name of this Body23.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def email(self):
        """Gets the email of this Body23.  # noqa: E501


        :return: The email of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Body23.


        :param email: The email of this Body23.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def email_usage(self):
        """Gets the email_usage of this Body23.  # noqa: E501


        :return: The email_usage of this Body23.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_usage

    @email_usage.setter
    def email_usage(self, email_usage):
        """Sets the email_usage of this Body23.


        :param email_usage: The email_usage of this Body23.  # noqa: E501
        :type: list[str]
        """
        if email_usage is None:
            raise ValueError("Invalid value for `email_usage`, must not be `None`")  # noqa: E501

        self._email_usage = email_usage

    @property
    def phone(self):
        """Gets the phone of this Body23.  # noqa: E501


        :return: The phone of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Body23.


        :param phone: The phone of this Body23.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone2(self):
        """Gets the phone2 of this Body23.  # noqa: E501


        :return: The phone2 of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._phone2

    @phone2.setter
    def phone2(self, phone2):
        """Sets the phone2 of this Body23.


        :param phone2: The phone2 of this Body23.  # noqa: E501
        :type: str
        """

        self._phone2 = phone2

    @property
    def address(self):
        """Gets the address of this Body23.  # noqa: E501


        :return: The address of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Body23.


        :param address: The address of this Body23.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this Body23.  # noqa: E501


        :return: The city of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Body23.


        :param city: The city of this Body23.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zipcode(self):
        """Gets the zipcode of this Body23.  # noqa: E501


        :return: The zipcode of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Body23.


        :param zipcode: The zipcode of this Body23.  # noqa: E501
        :type: str
        """

        self._zipcode = zipcode

    @property
    def country(self):
        """Gets the country of this Body23.  # noqa: E501


        :return: The country of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Body23.


        :param country: The country of this Body23.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body23, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body23):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
