# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body32(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'type': 'str',
        'is_sent': 'bool',
        'due_on': 'date',
        'comments': 'str'
    }

    attribute_map = {
        'number': 'number',
        'type': 'type',
        'is_sent': 'is_sent',
        'due_on': 'due_on',
        'comments': 'comments'
    }

    def __init__(self, number=None, type=None, is_sent=None, due_on=None, comments=None):  # noqa: E501
        """Body32 - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._type = None
        self._is_sent = None
        self._due_on = None
        self._comments = None
        self.discriminator = None
        if number is not None:
            self.number = number
        self.type = type
        if is_sent is not None:
            self.is_sent = is_sent
        if due_on is not None:
            self.due_on = due_on
        if comments is not None:
            self.comments = comments

    @property
    def number(self):
        """Gets the number of this Body32.  # noqa: E501


        :return: The number of this Body32.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Body32.


        :param number: The number of this Body32.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def type(self):
        """Gets the type of this Body32.  # noqa: E501


        :return: The type of this Body32.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Body32.


        :param type: The type of this Body32.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def is_sent(self):
        """Gets the is_sent of this Body32.  # noqa: E501


        :return: The is_sent of this Body32.  # noqa: E501
        :rtype: bool
        """
        return self._is_sent

    @is_sent.setter
    def is_sent(self, is_sent):
        """Sets the is_sent of this Body32.


        :param is_sent: The is_sent of this Body32.  # noqa: E501
        :type: bool
        """

        self._is_sent = is_sent

    @property
    def due_on(self):
        """Gets the due_on of this Body32.  # noqa: E501


        :return: The due_on of this Body32.  # noqa: E501
        :rtype: date
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on):
        """Sets the due_on of this Body32.


        :param due_on: The due_on of this Body32.  # noqa: E501
        :type: date
        """

        self._due_on = due_on

    @property
    def comments(self):
        """Gets the comments of this Body32.  # noqa: E501


        :return: The comments of this Body32.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Body32.


        :param comments: The comments of this Body32.  # noqa: E501
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body32, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body32):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
