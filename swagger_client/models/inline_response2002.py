# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'id': 'int',
        'username': 'str',
        'home': 'str',
        'directory': 'str',
        'shell': 'str',
        'groups': 'list[ApisystemusersGroups]',
        'is_active': 'bool'
    }

    attribute_map = {
        'url': 'url',
        'id': 'id',
        'username': 'username',
        'home': 'home',
        'directory': 'directory',
        'shell': 'shell',
        'groups': 'groups',
        'is_active': 'is_active'
    }

    def __init__(self, url=None, id=None, username=None, home=None, directory=None, shell=None, groups=None, is_active=None):  # noqa: E501
        """InlineResponse2002 - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._id = None
        self._username = None
        self._home = None
        self._directory = None
        self._shell = None
        self._groups = None
        self._is_active = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if id is not None:
            self.id = id
        self.username = username
        if home is not None:
            self.home = home
        if directory is not None:
            self.directory = directory
        if shell is not None:
            self.shell = shell
        if groups is not None:
            self.groups = groups
        if is_active is not None:
            self.is_active = is_active

    @property
    def url(self):
        """Gets the url of this InlineResponse2002.  # noqa: E501


        :return: The url of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse2002.


        :param url: The url of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def id(self):
        """Gets the id of this InlineResponse2002.  # noqa: E501


        :return: The id of this InlineResponse2002.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2002.


        :param id: The id of this InlineResponse2002.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this InlineResponse2002.  # noqa: E501

        Required. 32 characters or fewer. Letters, digits and ./-/_ only.  # noqa: E501

        :return: The username of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse2002.

        Required. 32 characters or fewer. Letters, digits and ./-/_ only.  # noqa: E501

        :param username: The username of this InlineResponse2002.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def home(self):
        """Gets the home of this InlineResponse2002.  # noqa: E501

        Starting location when login with this no-shell user.  # noqa: E501

        :return: The home of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this InlineResponse2002.

        Starting location when login with this no-shell user.  # noqa: E501

        :param home: The home of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._home = home

    @property
    def directory(self):
        """Gets the directory of this InlineResponse2002.  # noqa: E501

        Optional directory relative to user's home.  # noqa: E501

        :return: The directory of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this InlineResponse2002.

        Optional directory relative to user's home.  # noqa: E501

        :param directory: The directory of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def shell(self):
        """Gets the shell of this InlineResponse2002.  # noqa: E501


        :return: The shell of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """Sets the shell of this InlineResponse2002.


        :param shell: The shell of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._shell = shell

    @property
    def groups(self):
        """Gets the groups of this InlineResponse2002.  # noqa: E501


        :return: The groups of this InlineResponse2002.  # noqa: E501
        :rtype: list[ApisystemusersGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this InlineResponse2002.


        :param groups: The groups of this InlineResponse2002.  # noqa: E501
        :type: list[ApisystemusersGroups]
        """

        self._groups = groups

    @property
    def is_active(self):
        """Gets the is_active of this InlineResponse2002.  # noqa: E501

        Designates whether this account should be treated as active. Unselect this instead of deleting accounts.  # noqa: E501

        :return: The is_active of this InlineResponse2002.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this InlineResponse2002.

        Designates whether this account should be treated as active. Unselect this instead of deleting accounts.  # noqa: E501

        :param is_active: The is_active of this InlineResponse2002.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
