# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'id': 'int',
        'creator': 'str',
        'creator_name': 'str',
        'owner': 'str',
        'queue': 'str',
        'subject': 'str',
        'description': 'str',
        'state': 'str',
        'messages': 'list[ApiticketsMessages]',
        'is_read': 'str'
    }

    attribute_map = {
        'url': 'url',
        'id': 'id',
        'creator': 'creator',
        'creator_name': 'creator_name',
        'owner': 'owner',
        'queue': 'queue',
        'subject': 'subject',
        'description': 'description',
        'state': 'state',
        'messages': 'messages',
        'is_read': 'is_read'
    }

    def __init__(self, url=None, id=None, creator=None, creator_name=None, owner=None, queue=None, subject=None, description=None, state=None, messages=None, is_read=None):  # noqa: E501
        """InlineResponse2008 - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._id = None
        self._creator = None
        self._creator_name = None
        self._owner = None
        self._queue = None
        self._subject = None
        self._description = None
        self._state = None
        self._messages = None
        self._is_read = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if id is not None:
            self.id = id
        if creator is not None:
            self.creator = creator
        if creator_name is not None:
            self.creator_name = creator_name
        if owner is not None:
            self.owner = owner
        if queue is not None:
            self.queue = queue
        self.subject = subject
        self.description = description
        if state is not None:
            self.state = state
        if messages is not None:
            self.messages = messages
        if is_read is not None:
            self.is_read = is_read

    @property
    def url(self):
        """Gets the url of this InlineResponse2008.  # noqa: E501


        :return: The url of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse2008.


        :param url: The url of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def id(self):
        """Gets the id of this InlineResponse2008.  # noqa: E501


        :return: The id of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2008.


        :param id: The id of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def creator(self):
        """Gets the creator of this InlineResponse2008.  # noqa: E501


        :return: The creator of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this InlineResponse2008.


        :param creator: The creator of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def creator_name(self):
        """Gets the creator_name of this InlineResponse2008.  # noqa: E501


        :return: The creator_name of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this InlineResponse2008.


        :param creator_name: The creator_name of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def owner(self):
        """Gets the owner of this InlineResponse2008.  # noqa: E501


        :return: The owner of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this InlineResponse2008.


        :param owner: The owner of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def queue(self):
        """Gets the queue of this InlineResponse2008.  # noqa: E501


        :return: The queue of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this InlineResponse2008.


        :param queue: The queue of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._queue = queue

    @property
    def subject(self):
        """Gets the subject of this InlineResponse2008.  # noqa: E501


        :return: The subject of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this InlineResponse2008.


        :param subject: The subject of this InlineResponse2008.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def description(self):
        """Gets the description of this InlineResponse2008.  # noqa: E501


        :return: The description of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2008.


        :param description: The description of this InlineResponse2008.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def state(self):
        """Gets the state of this InlineResponse2008.  # noqa: E501


        :return: The state of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse2008.


        :param state: The state of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def messages(self):
        """Gets the messages of this InlineResponse2008.  # noqa: E501


        :return: The messages of this InlineResponse2008.  # noqa: E501
        :rtype: list[ApiticketsMessages]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this InlineResponse2008.


        :param messages: The messages of this InlineResponse2008.  # noqa: E501
        :type: list[ApiticketsMessages]
        """

        self._messages = messages

    @property
    def is_read(self):
        """Gets the is_read of this InlineResponse2008.  # noqa: E501


        :return: The is_read of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this InlineResponse2008.


        :param is_read: The is_read of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._is_read = is_read

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
