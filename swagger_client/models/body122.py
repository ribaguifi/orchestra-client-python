# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body122(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'protocol': 'str',
        'domains': 'list[ApiwebsitesDomains]',
        'is_active': 'bool',
        'contents': 'list[ApiwebsitesContents]',
        'directives': 'ApiwebsitesDirectives'
    }

    attribute_map = {
        'name': 'name',
        'protocol': 'protocol',
        'domains': 'domains',
        'is_active': 'is_active',
        'contents': 'contents',
        'directives': 'directives'
    }

    def __init__(self, name=None, protocol=None, domains=None, is_active=None, contents=None, directives=None):  # noqa: E501
        """Body122 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._protocol = None
        self._domains = None
        self._is_active = None
        self._contents = None
        self._directives = None
        self.discriminator = None
        self.name = name
        if protocol is not None:
            self.protocol = protocol
        if domains is not None:
            self.domains = domains
        if is_active is not None:
            self.is_active = is_active
        if contents is not None:
            self.contents = contents
        if directives is not None:
            self.directives = directives

    @property
    def name(self):
        """Gets the name of this Body122.  # noqa: E501


        :return: The name of this Body122.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body122.


        :param name: The name of this Body122.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this Body122.  # noqa: E501

        Select the protocol(s) for this website<br><tt>HTTPS only</tt> performs a redirection from <tt>http</tt> to <tt>https</tt>.  # noqa: E501

        :return: The protocol of this Body122.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Body122.

        Select the protocol(s) for this website<br><tt>HTTPS only</tt> performs a redirection from <tt>http</tt> to <tt>https</tt>.  # noqa: E501

        :param protocol: The protocol of this Body122.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def domains(self):
        """Gets the domains of this Body122.  # noqa: E501


        :return: The domains of this Body122.  # noqa: E501
        :rtype: list[ApiwebsitesDomains]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this Body122.


        :param domains: The domains of this Body122.  # noqa: E501
        :type: list[ApiwebsitesDomains]
        """

        self._domains = domains

    @property
    def is_active(self):
        """Gets the is_active of this Body122.  # noqa: E501


        :return: The is_active of this Body122.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Body122.


        :param is_active: The is_active of this Body122.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def contents(self):
        """Gets the contents of this Body122.  # noqa: E501


        :return: The contents of this Body122.  # noqa: E501
        :rtype: list[ApiwebsitesContents]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this Body122.


        :param contents: The contents of this Body122.  # noqa: E501
        :type: list[ApiwebsitesContents]
        """

        self._contents = contents

    @property
    def directives(self):
        """Gets the directives of this Body122.  # noqa: E501


        :return: The directives of this Body122.  # noqa: E501
        :rtype: ApiwebsitesDirectives
        """
        return self._directives

    @directives.setter
    def directives(self, directives):
        """Sets the directives of this Body122.


        :param directives: The directives of this Body122.  # noqa: E501
        :type: ApiwebsitesDirectives
        """

        self._directives = directives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body122, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body122):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
